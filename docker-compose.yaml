version: '3'

volumes:
  pgdatasource:

services:
  db:
    container_name: db
    networks:
      - app-network
    image: postgres
    restart: always
    environment:
      - DATABASE_HOST=127.0.0.1
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT=5432
      - POSTGRES_DB=db
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      start_period: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./pgdatasource:/var/lib/postgresql/data

  api:
    container_name: api
    networks:
      - app-network
    build: api/
    depends_on:
      db:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT=5432
      - POSTGRES_DB=db
    volumes:
      - './api:/app'
    command: npm run start:dev

  ui:
    container_name: ui
    networks:
      - app-network
    build: ui/
    depends_on:
      - 'api'
    ports:
      - '3000:3000'
    environment:
      - NODE_OPTIONS=--max_old_space_size=8192
    volumes:
      - './ui:/app'
networks:
  app-network:
    driver: bridge